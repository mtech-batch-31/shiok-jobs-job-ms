plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.3'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'jacoco'
	id 'org.sonarqube' version '3.5.0.2730'
	id 'checkstyle'
}

group = 'com.mtech'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

bootJar {
	archiveFileName = "shiok_jobs_job_ms.jar"
	archiveClassifier.set(null)
}

jacocoTestReport {
	dependsOn test

	reports {
		xml.required = true
	}

	afterEvaluate {
		excludedClassFilesForReport(classDirectories)
	}
}

private excludedClassFilesForReport(classDirectories) {
	classDirectories.setFrom(files(classDirectories.files.collect {
		fileTree(dir: it, exclude: [
				'**/entity/*.class',
				'**/dto/**/*.class',
				'**/model/**/*.class',
				'**/helper/*.class',
				'**/exception/*.class',
				'**/constant/*.class',
				'**/helper/DataSeeder*.class',
				'**/Application.class'
		])
	}))
}



sonarqube {

	properties {
		property "sonar.projectKey", "mtech-batch-31_shiok-jobs-user-ms"
		property "sonar.organization", "mtech-batch-31"
		property "sonar.host.url", "https://sonarcloud.io"
		property 'sonar.coverage.jacoco.xmlReportPaths', "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
	}
}
